{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","name","email","id","className","alt","src","CardList","robots","map","robot","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","hasError","info","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kQAYMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,gCCjFlDC,EAbF,SAACC,GAAW,IACbC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,yBAAKC,UAAU,qDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,+BAAKC,EAAL,QCcDK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,aCE1BW,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAWC,OAAQ,kBAAmBC,OAAQ,UACjEvB,EAAMwB,WCiBJC,E,kDAnBX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACDT,MAAQ,CACTmC,UAAU,GAHC,E,8DAOD5B,EAAO6B,GACrBC,KAAKC,SAAS,CAAEH,UAAU,M,+BAI1B,OAAIE,KAAKrC,MAAMmC,SACJ,wDAEJE,KAAK5B,MAAMwB,a,GAhBCM,aCSZC,G,0LARWC,EAAWC,GAC7B,OAAO,I,+BAGT,OAAQ,wBAAI7B,UAAU,MAAd,mB,GALO0B,cCwBdI,E,kLAGCN,KAAK5B,MAAMmC,oB,+BAIJ,IAAD,EACqDP,KAAK5B,MAAxDoC,EADF,EACEA,YAAaC,EADf,EACeA,eAAgB7B,EAD/B,EAC+BA,OAAQ8B,EADvC,EACuCA,UACvCC,EAAiB/B,EAAOgC,QAAO,SAAA9B,GACjC,OAAOA,EAAMT,KAAKwC,cAAcC,SAASN,EAAYK,kBAEzD,OAAOH,EACP,uCAEQ,kBAAC,WAAD,KACI,yBAAKlC,UAAU,MACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWW,aAAcsB,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU7B,OAAQ+B,Y,GArB/BT,aA8BJa,eA9CS,SAAApD,GACpB,MAAO,CACH6C,YAAa7C,EAAMqD,aAAaR,YAChC5B,OAAQjB,EAAMsD,cAAcrC,OAC5B8B,UAAW/C,EAAMsD,cAAcP,UAC/BxC,MAAOP,EAAMsD,cAAc/C,UAIR,SAACgD,GACxB,MAAO,CACHT,eAAgB,SAACU,GAAD,OAAWD,ECdM,CACrC9B,KCR+B,sBDS/BgC,QDYuDD,EAAME,OAAOC,SAChEf,gBAAiB,kBAAMW,GCRI,SAACA,GAChCA,EAAS,CAAE9B,KCbuB,2BDclCmC,MAAM,8CACDlE,MAAK,SAAAmE,GAAQ,OAAIA,EAASC,UAC1BpE,MAAK,SAAAqE,GAAI,OAAIR,EAAS,CAAE9B,KCfK,yBDeyBgC,QAASM,OAC/DzD,OAAM,SAAAC,GAAK,OAAIgD,EAAS,CAAE9B,KCfE,wBDe2BgC,QAASlD,cDqC1D6C,CAA6CT,G,eGjDtDqB,EAAqB,CACvBnB,YAAa,IAYXoB,EAAqB,CACvBlB,WAAW,EACX9B,OAAQ,GACRV,MAAM,ICXJ2D,EAASC,yBACTC,EAAcC,YAAgB,CAAEhB,aDFV,WAA0C,IAAzCrD,EAAwC,uDAAlCgE,EAAoBM,EAAc,uDAAP,GAC1D,OAAOA,EAAO7C,MACV,IDb2B,sBCcvB,OAAO,2BAAIzB,GAAX,IAAkB6C,YAAayB,EAAOb,UAC1C,QACI,OAAOzD,ICHiCsD,cDavB,WAA0C,IAAzCtD,EAAwC,uDAAlCiE,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAO7C,MACV,ID1B8B,yBC2B1B,OAAO,2BAAKzB,GAAZ,IAAmB+C,WAAW,IAClC,ID3B8B,yBC4B1B,OAAO,2BAAK/C,GAAZ,IAAmBiB,OAAQqD,EAAOb,QAASV,WAAU,IACzD,ID5B6B,wBC6BzB,OAAO,2BAAK/C,GAAZ,IAAmBO,MAAO+D,EAAOb,QAASV,WAAW,IACzD,QACI,OAAO/C,MCrBbuE,EAAQC,YAAYJ,EAAaK,YAAgBC,IAAiBR,IAExES,IAASC,OACP,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAIJM,SAASC,eAAe,SXDnB,SAAkBxF,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIwF,IAAIC,eAAwBhG,OAAOC,SAASgG,MACpDC,SAAWlG,OAAOC,SAASiG,OAIvC,OAGFlG,OAAOmG,iBAAiB,QAAQ,WAC9B,IAAM9F,EAAK,UAAM2F,eAAN,sBAEPlG,IAgEV,SAAiCO,EAAOC,GAEtCsE,MAAMvE,EAAO,CACX+F,QAAS,CAAE,iBAAkB,YAE5B1F,MAAK,SAAAmE,GAEJ,IAAMwB,EAAcxB,EAASuB,QAAQE,IAAI,gBAEnB,MAApBzB,EAAS0B,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjG,UAAUC,cAAciG,MAAM/F,MAAK,SAAAC,GACjCA,EAAa+F,aAAahG,MAAK,WAC7BV,OAAOC,SAAS0G,eAKpBvG,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyF,CAAwBvG,EAAOC,GAI/BC,UAAUC,cAAciG,MAAM/F,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OWrB/BE,K","file":"static/js/main.84485db2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n    const { name, email, id } = props\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>p{email}l</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","\nimport React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((robot,i)=> {\n                    return (\n                        <Card \n                            key={i} \n                            id={robot.id} \n                            name={robot.name} \n                            email={robot.email}\n                        />\n                    );\n                })\n            }\n        </div> \n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange} \n            />\n        </div>\n        \n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll' , border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React , { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render () {\n        if (this.state.hasError){\n            return <h1>Ooooop. That is not good</h1>\n        } \n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, {Component} from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n      return  <h1 className='f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header;","import React, { Fragment, Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass  App extends Component {\n    \n    componentDidMount() {\n        this.props.onRequestRobots();\n\n    }\n\n    render () {\n        const { searchField, onSearchChange, robots, isPending } = this.props\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return isPending ?\n        <h1>Loading</h1>:\n        (\n                <Fragment >\n                    <div className='tc'>\n                        <Header />\n                        <SearchBox searchChange={onSearchChange}/>\n                        <Scroll>\n                            <ErrorBoundry>\n                                <CardList robots={filteredRobots}/>\n                            </ErrorBoundry>\n                        </Scroll>\n                    </div>  \n                </Fragment>\n            );\n    } \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n    \n});\n\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch ,action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return {...state, searchField: action.payload}\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error:''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true }\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending:false}\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false}\n        default:\n            return state;\n        \n    }\n}","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger(); \nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Fragment>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Fragment>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}